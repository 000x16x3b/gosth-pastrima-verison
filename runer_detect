Clear-Host

Write-Host @"
[38;2;160;32;240;48;2m
██╗  ██╗███████╗███╗   ██╗███╗   ██╗███████╗██████╗ ██╗   ██╗
██║ ██╔╝██╔════╝████╗  ██║████╗  ██║██╔════╝██╔══██╗╚██╗ ██╔╝
█████╔╝ █████╗  ██╔██╗ ██║██╔██╗ ██║█████╗  ██║  ██║ ╚████╔╝ 
██╔═██╗ ██╔══╝  ██║╚██╗██║██║╚██╗██║██╔══╝  ██║  ██║  ╚██╔╝  
██║  ██╗███████╗██║ ╚████║██║ ╚████║███████╗██████╔╝   ██║   
╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═════╝    ╚═╝   
                                                             [0m
                                            
"@ -ForegroundColor Magenta

$system32Path = "$env:SystemRoot\System32"
$desktopPath = [Environment]::GetFolderPath("Desktop")
$downloadsPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Downloads')

$paths = @($system32Path, $desktopPath, $downloadsPath)

$files = foreach ($path in $paths) {
    Get-ChildItem -Path $path -File -Recurse -ErrorAction SilentlyContinue
}

$results = @()

foreach ($file in $files) {
    if ($file.Extension -eq ".exe") {
        try {
            $signature = (Get-AuthenticodeSignature $file.FullName).Status
        } catch {
            $signature = "Unknown"
        }

        if ($signature -ne "Valid") {
            $results += [PSCustomObject]@{
                FilePath = $file.FullName
                SignatureStatus = $signature
            }
        }
    }
}

$results | Out-GridView -Title "Unsigned / Unknown Executables"
